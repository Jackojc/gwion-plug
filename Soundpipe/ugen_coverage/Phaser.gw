#! coverage for 'Phaser'. (generated by util/coverage.sh)

var Phaser a => dac;
samp => now;
a =< dac;

#! testing 'MaxNotch1Freq'
{

	a.MaxNotch1Freq();
}

#! testing 'MaxNotch1Freq'
{
	var float	MaxNotch1Freq;

	a.MaxNotch1Freq(MaxNotch1Freq);
}

#! testing 'MinNotch1Freq'
{

	a.MinNotch1Freq();
}

#! testing 'MinNotch1Freq'
{
	var float	MinNotch1Freq;

	a.MinNotch1Freq(MinNotch1Freq);
}

#! testing 'Notch_width'
{

	a.Notch_width();
}

#! testing 'Notch_width'
{
	var float	Notch_width;

	a.Notch_width(Notch_width);
}

#! testing 'NotchFreq'
{

	a.NotchFreq();
}

#! testing 'NotchFreq'
{
	var float	NotchFreq;

	a.NotchFreq(NotchFreq);
}

#! testing 'VibratoMode'
{

	a.VibratoMode();
}

#! testing 'VibratoMode'
{
	var float	VibratoMode;

	a.VibratoMode(VibratoMode);
}

#! testing 'depth'
{

	a.depth();
}

#! testing 'depth'
{
	var float	depth;

	a.depth(depth);
}

#! testing 'feedback_gain'
{

	a.feedback_gain();
}

#! testing 'feedback_gain'
{
	var float	feedback_gain;

	a.feedback_gain(feedback_gain);
}

#! testing 'invert'
{

	a.invert();
}

#! testing 'invert'
{
	var float	invert;

	a.invert(invert);
}

#! testing 'level'
{

	a.level();
}

#! testing 'level'
{
	var float	level;

	a.level(level);
}

#! testing 'lfobpm'
{

	a.lfobpm();
}

#! testing 'lfobpm'
{
	var float	lfobpm;

	a.lfobpm(lfobpm);
}
samp => now;
a => dac;
second => now;
